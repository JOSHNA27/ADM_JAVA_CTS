(a).FruitBasketUtility.java 

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

public class FruitBasketUtility {
 private List<FruitBasket> fruitBasketList=new ArrayList<FruitBasket>();

 public List<FruitBasket> getFruitBasketList() {
  return fruitBasketList;
 }

 public void setFruitBasketList(List<FruitBasket> fruitBasketList) {
  this.fruitBasketList = fruitBasketList;
 }

 public void addToBasket(FruitBasket fbObj) {
  // Fill your code here
  fruitBasketList.add(fbObj);

 }

 public int calculateBill(Stream<FruitBasket> fruitBasketStream) {
  
  int b[]=new int[1];
  // Fill your code here
  fruitBasketStream.forEach(a->
  {
   int wt=a.getWeightInKgs();
   int pr=a.getPricePerKg();
    b[0]=b[0]+pr*wt;
  });
  return b[0];


 
 }

}

(b).FruitBasket.java 

public class FruitBasket {
 private String fruitName;
 private int weightInKgs;
 private int pricePerKg;
 
 public String getFruitName() {
  return fruitName;
 }
 public void setFruitName(String fruitName) {
  this.fruitName = fruitName;
 }
 public int getWeightInKgs() {
  return weightInKgs;
 }
 public void setWeightInKgs(int weightInKgs) {
  this.weightInKgs = weightInKgs;
 }
 public int getPricePerKg() {
  return pricePerKg;
 }
 public void setPricePerKg(int pricePerKg) {
  this.pricePerKg = pricePerKg;
 }
 public FruitBasket(String fruitName, int weightInKgs, int pricePerKg) {
  super();
  this.fruitName = fruitName;
  this.weightInKgs = weightInKgs;
  this.pricePerKg = pricePerKg;
 }
 public FruitBasket() {
  super();
 }
 
}

(c).Main.java

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Stream;

public class Main {

 public static void main(String[] args) {
  Scanner sc = new Scanner(System.in);
  int option=0;
  String fruitName="";
  int weightInKgs=0;
  int pricePerKg=0;
  FruitBasketUtility utilObj=new FruitBasketUtility();
  do {
   System.out.println("Select an option:\n1.Add Fruit to Basket\n2.Calculate Bill\n3.Exit");
   option=sc.nextInt();
   sc.nextLine();
   switch (option)
   {
   case 1:
    System.out.println("Enter the fruit name");
    fruitName=sc.nextLine();
    System.out.println("Enter weight in Kgs");
    weightInKgs=sc.nextInt();
    System.out.println("Enter price per Kg");
    pricePerKg=sc.nextInt();
    FruitBasket fbObj=new FruitBasket(fruitName,weightInKgs,pricePerKg);
    utilObj.addToBasket(fbObj);
    break;
   case 2:
    List<FruitBasket> list=utilObj.getFruitBasketList();
    if(list.isEmpty())
    {
     System.out.println("Your basket is empty. Please add fruits.");
    }
    else
    {
     FruitBasket ob[]=new FruitBasket[list.size()];
     for(int i=0;i<list.size();i++)
     {
      FruitBasket o=list.get(i);
      ob[i]=o;
     }
     Stream<FruitBasket>fruitBasketStream=Arrays.stream(ob);
     int amount=utilObj.calculateBill(fruitBasketStream);
     System.out.println("The estimated bill amount is Rs "+amount);
    }
    
    // Fill your code here
    break;





   case 3:
    System.out.println("Thank you for using the application.");
    break;
   default:
    System.out.println("Invalid option. Please try again.");
    break;
   }

  }while(option!=3);

 }

}